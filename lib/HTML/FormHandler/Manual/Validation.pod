package HTML::FormHandler::Manual::Validation;
# ABSTRACT: validating fields

=head1 SYNOPSIS

L<Manual Index|HTML::FormHandler::Manual>

There are many options for validating fields in FormHandler.

=head1 Field attributes for validation

Each individual field may have additional attributes that relate to validation,
which are not documented here. See the individual field documentation, linked
from L<HTML::FormHandler::Manual::Fields>.

=head2 range_start, range_end

Starting and ending range for number fields.

=head2 required

Setting the 'required' flag on a field initiates a check for the existence
of some value. If the field does not have a value, the 'required' error
message is issues, which can be set on a form or field basis:

   has_field 'section' => ( required => 1,
       messages => { required => 'Please provide a section' } );

Note that a required flag on a subfield -- a field inside a compound field
or repeatable field -- does not cause the containing field to be required.
You need to set 'required' all the way up, if that's the behavior that you
want.

If a field is empty and *not* required, no other validation will be
performed.

=head1 Validation methods

=head2 validate_method

You can provide a validation method for a field by setting a coderef with
'validate_method'.

    has_field 'fox' => ( validate_method => \&check_fox );
    sub check_fox {
        my $self = shift; # self is the fox field
        .....
    }

=head2 validate_<field_name>

If you provide a 'validate_<field_name>' method it will be automatically used.

    has_field 'cat';
    sub validate_cat {
        my ( $self, $field ) = @_; # self is the form
        ....
    }

=head1 form validate method

A form validation method can be used to do cross-validation or validation
checks that need information from more than one field.

    sub validate {
        my $self = shift;
        $self->field('foo')->add_error('....')
            if( $self->field('foo')->value eq '..' &&
                    $self->field('bar')->value eq '..' );
    }


=head1 Filters, transformations, and constraints

The actions in the 'apply' array will be performed in the order they are
specified, allowing fine-grained control over inflation and validation.

=head2 Moose types

FormHandler supplies a library of Moose types in L<HTML::FormHandler::Types>.

=head2 Apply actions

There are number of different flavors of 'apply' actions.

See also L<HTML::FormHandler::Validate>.

=head1 Dependency

The 'dependency' field_list key is an array of arrays of field names.
During validation, if any field in a given group
contains the pattern /\S/ (non-blank), the 'required' flag
is set for all of the fields in the group.

   has '+dependency' => ( default => sub {
            [
               ['address', 'city', 'state', 'zip'],
               ['cc_no', 'cc_expires'],
            ],
        },
    );


=cut
